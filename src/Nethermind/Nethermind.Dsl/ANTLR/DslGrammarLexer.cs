//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DslGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DslGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPERATOR=1, SOURCE=2, WATCH=3, WHERE=4, PUBLISH=5, ID=6, DIGIT=7, WS=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPERATOR", "SOURCE", "WATCH", "WHERE", "PUBLISH", "ID", "DIGIT", "WS"
	};


	public DslGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DslGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'SOURCE'", "'WATCH'", "'WHERE'", "'PUBLISH'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPERATOR", "SOURCE", "WATCH", "WHERE", "PUBLISH", "ID", "DIGIT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DslGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DslGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', '\x45', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x18', '\n', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x6', '\a', '\x36', '\n', '\a', '\r', '\a', 
		'\xE', '\a', '\x37', '\x3', '\b', '\x6', '\b', ';', '\n', '\b', '\r', 
		'\b', '\xE', '\b', '<', '\x3', '\t', '\x6', '\t', '@', '\n', '\t', '\r', 
		'\t', '\xE', '\t', '\x41', '\x3', '\t', '\x3', '\t', '\x2', '\x2', '\n', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x3', '\x2', '\x5', '\x3', '\x2', '\x63', 
		'|', '\x3', '\x2', '\x32', ';', '\x5', '\x2', '\v', '\f', '\xF', '\xF', 
		'\"', '\"', '\x2', 'J', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x3', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\a', ' ', '\x3', '\x2', '\x2', '\x2', '\t', '&', '\x3', '\x2', '\x2', 
		'\x2', '\v', ',', '\x3', '\x2', '\x2', '\x2', '\r', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xF', ':', '\x3', '\x2', '\x2', '\x2', '\x11', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x18', '\x5', '\x5', '\x3', '\x2', '\x14', 
		'\x18', '\x5', '\a', '\x4', '\x2', '\x15', '\x18', '\x5', '\t', '\x5', 
		'\x2', '\x16', '\x18', '\x5', '\v', '\x6', '\x2', '\x17', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x14', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x4', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', 
		'U', '\x2', '\x2', '\x1A', '\x1B', '\a', 'Q', '\x2', '\x2', '\x1B', '\x1C', 
		'\a', 'W', '\x2', '\x2', '\x1C', '\x1D', '\a', 'T', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', '\x45', '\x2', '\x2', '\x1E', '\x1F', '\a', 'G', '\x2', 
		'\x2', '\x1F', '\x6', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', 'Y', 
		'\x2', '\x2', '!', '\"', '\a', '\x43', '\x2', '\x2', '\"', '#', '\a', 
		'V', '\x2', '\x2', '#', '$', '\a', '\x45', '\x2', '\x2', '$', '%', '\a', 
		'J', '\x2', '\x2', '%', '\b', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', 
		'Y', '\x2', '\x2', '\'', '(', '\a', 'J', '\x2', '\x2', '(', ')', '\a', 
		'G', '\x2', '\x2', ')', '*', '\a', 'T', '\x2', '\x2', '*', '+', '\a', 
		'G', '\x2', '\x2', '+', '\n', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', 
		'R', '\x2', '\x2', '-', '.', '\a', 'W', '\x2', '\x2', '.', '/', '\a', 
		'\x44', '\x2', '\x2', '/', '\x30', '\a', 'N', '\x2', '\x2', '\x30', '\x31', 
		'\a', 'K', '\x2', '\x2', '\x31', '\x32', '\a', 'U', '\x2', '\x2', '\x32', 
		'\x33', '\a', 'J', '\x2', '\x2', '\x33', '\f', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x36', '\t', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\xE', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\t', '\x3', '\x2', 
		'\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', 
		'\x2', '\x2', '=', '\x10', '\x3', '\x2', '\x2', '\x2', '>', '@', '\t', 
		'\x4', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\b', '\t', '\x2', '\x2', '\x44', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x2', '\x17', '\x37', '<', '\x41', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
